#set the correct wd
setwd('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
#read the energy data into file
energy_file<-read.csv(file = 'annual_generation_state.csv')
names(energy_file)[5] <- "generation"
names(energy.file)[4]<-"source"
Names(energy.file)[3]<-"producer"
names(energy_file)[5] <- "generation"
names(energy_file)[4]<- "source"
Names(energy_file)[3]<- "producer"
names(energy_file)[5] <- "generation"
names(energy_file)[4]<- "source"
names(energy_file)[3]<- "producer"
energy_file$GEN <- as.numeric( gsub(",", "", energy_file$GEN))
head(energy_file)
energy_file$generation <- as.numeric( gsub(",", "", energy_file$generation))
head(energy_file)
is.na(energy_file$STATE)
sum(is.na(energy_file$STATE))
sum(!is.na(energy_file$STATE))
energy_file<-energy_file[order(energy_file$STATE),]
energy_file<-subset(energy_file, STATE!="NA ")
energy_file<-subset(energy_file, STATE!="NA")
energy_file<-subset(energy_file, STATE!="  ")
energy_file[,2] = toupper(energy_file[,2])
energy_file$STATE <- as.factor(energy_file$STATE)
energy_file$producer <- as.factor(energy_file$producer)
energy_file$source <- as.factor(energy_file$source)
energy_file <- subset(energy_file, GEN>=0)
energy_file <- subset(energy_file, generation>=0)
energy_file <- subset(energy_file, (source()!= "Other"))
energy_file <- subset(energy_file, (source!= "Other"))
energy_file <- subset(energy_file, (source!= "Other Gases"))
energy_file <- subset(energy_file, (source!= "Other Biomass"))
energy_file <- subset(energy_file, (source!= "Pumped Storage"))
levels(energy_file$source)
levels(energy_file$source)[levels(energy_file$source)=="Hydroelectric Conventional"]<- "Hydro"
levels(energy_file$source)[levels(energy_file$source)=="Wood and Wood Derived Fuels"]<- "Wood"
levels(energy_file$source)[levels(energy_file$source)=="Solar Thermal Photovoltaic"]<- "Solar"
sapply(energy_file,levels)
droplevels(energy_file$ENERGY.SOURCE)
droplevels(energy_file$source)
#set the correct wd
setwd('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
#Cleaning up the data for analysis
#read the energy data into file
energy_file<-read.csv(file = 'annual_generation_state.csv')
#remane the columns name for ease
names(energy_file)[5] <- "generation"
names(energy_file)[4]<-"source"
names(energy_file)[3]<-"producer"
#check the column types
#sapply(energy_file,class)
#remove all the , from GEN column
#convert GEN column into numeric values need to use gsub instead of sub
energy_file$generation <- as.numeric( gsub(",", "", energy_file$generation))
head(energy_file)
#sort the STATE column to find missing values
energy_file<-energy_file[order(energy_file$STATE),]
#use subset to remove the first 3 rows with empty cells
energy_file<-subset(energy_file, STATE!="  ")
#change the US-Total values to US-TOTAL so that all are in Uppercase now
energy_file[,2] = toupper(energy_file[,2])
#remove all rows where generation is negative…52752 objs remain
energy_file <- subset(energy_file, generation>=0)
#remove energy sources…42293 remain
energy_file <- subset(energy_file, (source!= "Other"))
energy_file <- subset(energy_file, ENERGY.SOURCE!= "Other Gases")
energy_file <- subset(energy_file, ENERGY.SOURCE!= "Other Biomass")
energy_file <- subset(energy_file, ENERGY.SOURCE!= "Pumped Storage")
#convert the columns into factors
energy_file$STATE <- as.factor(energy_file$STATE)
energy_file$producer <- as.factor(energy_file$producer)
energy_file$source <- as.factor(energy_file$source)
#rename energy sources to make easier: hydro, wood, electric, solar
levels(energy_file$source)[levels(energy_file$source)=="Hydroelectric Conventional"]<- "Hydro"
levels(energy_file$source)[levels(energy_file$source)=="Wood and Wood Derived Fuels"]<- "Wood"
levels(energy_file$source)[levels(energy_file$source)=="Solar Thermal Photovoltaic"]<- "Solar"
#display and check all the levels in the data
#Sapply(energy_file, leve;s)
#remove energy sources…42293 remain
energy_file <- subset(energy_file, (source!= "Other"))
energy_file <- subset(energy_file, source!= "Other Gases")
energy_file <- subset(energy_file, source!= "Other Biomass")
energy_file <- subset(energy_file, source!= "Pumped Storage")
droplevels(energy_file$source)
View(energy_file)
levels(energy_file$source)
droplevels(energy_file$source)
library(rsconnect)
rsconnect::deployApp('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
library(rsconnect)
rsconnect::deployApp('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
library(rsconnect)
rsconnect::deployApp('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
# Project 1 CS 424 Spring 2020 UIC - Rabia Ibtasar
#To deploy
#library(rsconnect)
#rsconnect::deployApp('path/to/your/app')
#libraries to include
library(shiny)
library(shinydashboard)
library(ggplot2)
#library(lubridate)
#library(DT)
#library(jpeg)
#library(grid)
#library(leaflet)
#library(scales)
#set the correct wd
setwd('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
#Cleaning up the data for analysis
#read the energy data into file
energy_file<-read.csv(file = 'annual_generation_state.csv')
#remane the columns name for ease
names(energy_file)[5] <- "GENERATION"
names(energy_file)[4]<-"SOURCE"
names(energy_file)[3]<-"PRODUCER"
#check the column types
#sapply(energy_file,class)
#remove all the , from GEN column
#convert GEN column into numeric values need to use gsub instead of sub
energy_file$GENERATION <- as.numeric( gsub(",", "", energy_file$GENERATION))
#head(energy_file)
#sort the STATE column to find missing values
energy_file<-energy_file[order(energy_file$STATE),]
#use subset to remove the STATES with empty cells
energy_file<-subset(energy_file, STATE!="  ")
#change the US-Total values to US-TOTAL so that all are in Uppercase now
energy_file[,2] = toupper(energy_file[,2])
#remove all rows where generation is negative but still keep the ones with 0
energy_file <- subset(energy_file, generation>=0)
#removethe 4 energy sources that are not required…42293 remain
energy_file <- subset(energy_file, (SOURCE!= "Other"))
energy_file <- subset(energy_file, SOURCE!= "Other Gases")
energy_file <- subset(energy_file, SOURCE!= "Other Biomass")
energy_file <- subset(energy_file, SOURCE!= "Pumped Storage")
#convert the columns into factors
energy_file$STATE <- as.factor(energy_file$STATE)
energy_file$PRODUCER <- as.factor(energy_file$PRODUCER)
energy_file$SOURCE <- as.factor(energy_file$SOURCE)
#rename energy sources to make easier: hydro, wood, electric, solar
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Hydroelectric Conventional"]<- "Hydro"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Wood and Wood Derived Fuels"]<- "Wood"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal Photovoltaic"]<- "Solar"
#display and check all the levels in the data
#Sapply(energy_file, levels)
#remove the unused levels or energy sources 42293 objects remain
#droplevels(energy_file$source)
energy_file <- subset(energy_file, GENERATION>=0)
energyPlot1<-table(energy_file$ENERGY.SOURCE, energy_file$YEAR)
barplot(count, main="Energy Source consumed per year", xlab = "Year", ylab = "energy consumed")
energyPlot1<-table(energy_file$SOURCE, energy_file$YEAR)
barplot(count, main="Energy Source consumed per year", xlab = "Year", ylab = "energy consumed")
energyPlot1<-table(energy_file$ENERGY.SOURCE, energy_file$YEAR)
barplot(energyPlot1, main="Energy Source consumed per year", xlab = "Year", ylab = "energy consumed")
energyPlot1<-table(energy_file$SOURCE, energy_file$YEAR)
barplot(energyPlot1, main="Energy Source consumed per year", xlab = "Year", ylab = "Energy consumed (MWh")
ggplot(data=energyPlot1)+
Geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)
)
ggplot(data=energyPlot1)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=YEAR, fill=Energy Source)))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE)position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=YEAR, fill=Energy Source)))
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_point(mapping=(aes(x=energy_file$YEAR, fill=energy_file$SOURCE)))
ggplot(data=energy_file)+ geom_point(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE))
ggplot(data=energy_file)+ geom_point(mapping=aes(x=energy_file$YEAR,y=energy_file$GENERATION))
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=energy_file$YEAR,y=energy_file$GENERATION,color=energy_file$SOURCE),position = "jitter")
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=energy_file$YEAR,y=energy_file$GENERATION,color=energy_file$SOURCE))
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE))
library(RColorBrewer)
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer()
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer(palette = "Pastel1")
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer(palette = "Pastel2")
display.brewer.all()
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer(palette = "SEt3")
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer(palette = "Set3")
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_fill_brewer(palette = "Set2")
levels(energy_file$SOURCE)
colors<-c('Coal'='#a50026','Geothermal'='#d73027','Hydro'='#f46d43','Natural Gas'='#fdae61','Nuclear'='#fee090','Petroleum'='#e0f3f8','Solar Thermal and Photovoltaic'='#abd9e9',Total='#313695','Wind'='#74add1','Wood'='#4575b4')
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_color_manual(values=colors)
colors<-c('Coal'='#a50026','Geothermal'='#d73027','Hydro'='#f46d43','Natural Gas'='#fdae61','Nuclear'='#fee090','Petroleum'='#e0f3f8','Solar Thermal and Photovoltaic'='#abd9e9',Total='black','Wind'='#74add1','Wood'='#4575b4')
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_color_manual(values=colors)
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal Photovoltaic"] <- "Solar"
levels(energy_file$SOURCE)
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal and Photovoltaicc"] <- "Solar"
levels(energy_file$SOURCE)
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal and Photovoltaic"] <- "Solar"
levels(energy_file$SOURCE)
colors<-c('Coal'='#a50026','Geothermal'='#d73027','Hydro'='#f46d43','Natural Gas'='#fdae61','Nuclear'='#fee090','Petroleum'='#e0f3f8','Solar'='#abd9e9',Total='black','Wind'='#74add1','Wood'='#4575b4')
?geom_bar
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_color_manual(values=colors)
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR, fill=SOURCE),position="fill")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION, fill=SOURCE))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE))
ggplot(data=energy_file,x=YEAR, y=GENERATION)+ geom_bar(fill=SOURCE)
ggplot(data=energy_file,aes(x=YEAR, y=GENERATION))+ geom_bar(fill=SOURCE)
ggplot(data=energy_file,aes(x=YEAR, y=GENERATION))+ geom_bar(fill=energy.file$SOURCE)
ggplot(data=energy_file,aes(x=YEAR, y=GENERATION))+ geom_bar(fill=energy_file$SOURCE)
ggplot(data=energy_file,aes(x=YEAR, y=GENERATION))+ geom_bar(fill=SOURCE)
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE))
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab(Number)
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_fill_brewer(palette = "Set3") +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_fill_brewer(palette = "Set3") +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_fill_manual(colors) +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_color_manual(colors) +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(data=energy_file)+ geom_smooth(mapping=aes(x=YEAR,y=GENERATION,color=SOURCE)) +scale_color_manual(values=colors)
?geom_line
ggplot(energy_file,aes(YEAR,GENERATION,group=SOURCE)) + geom_line()
ggplot(energy_file,aes(x=YEAR,y=GENERATION,group=SOURCE)) + geom_line()
ggplot(energy_file,aes(x=YEAR,group=SOURCE)) + geom_line()
ggplot(energy_file,aes(x=YEAR,y=GENERATION,color=SOURCE)) + geom_line()
levels(energy_file$SOURCE)
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_color_manual(colors) +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(energy_file, aes(x = YEAR)) +
geom_col(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_color_manual(colors) +
ylab("Percent") +
ggtitle("Show precentages in bar chart")
ggplot(data=energy_file)+ geom_col(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(data=energy_file)+ geom_col(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(energy_file, aes(YEAR, GENERATION)) +
geom_col()
ggplot(energy_file, aes(YEAR, GENERATION)) +
geom_col(fill=source)
ggplot(energy_file, aes(YEAR, GENERATION)) +
geom_col(fillCol(SOURCE))
ggplot(data=energy_file)+ geom_col(mapping=aes(x=YEAR,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(data=energy_file)+ geom_col(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE)) +
ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_col(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE)) +ggtitle("Total Amount of each energry source per year from 1990-2019")+ylab('Number')
Plotdata<-subset(energy_file, energy_file$SOURCE!="Total")
view(plot())
view(plotdata)
levels(Plotdata$SOURCE)
Plotdata<-subset(energy_file, SOURCE!="Total")
levels(Plotdata$SOURCE)
energy_file <- subset(energy_file, SOURCE!= "Total")
energy_file$SOURCE <- as.factor(energy_file$SOURCE)
droplevels(energy_file$SOURCE)
# Project 1 CS 424 Spring 2020 UIC - Rabia Ibtasar
#To deploy
#library(rsconnect)
#rsconnect::deployApp('path/to/your/app')
#libraries to include
library(shiny)
library(shinydashboard)
library(ggplot2)
Library(RColorBrewer)
#library(DT)
#library(jpeg)
#library(grid)
#library(leaflet)
#library(scales)
#set the correct wd
setwd('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
#Cleaning up the data for analysis
#read the energy data into file
energy_file<-read.csv(file = 'annual_generation_state.csv')
#remane the columns name for ease
names(energy_file)[5] <- "GENERATION"
names(energy_file)[4]<-"SOURCE"
names(energy_file)[3]<-"PRODUCER"
#check the column types
#sapply(energy_file,class)
#remove all the , from GEN column
#convert GEN column into numeric values need to use gsub instead of sub
energy_file$GENERATION <- as.numeric( gsub(",", "", energy_file$GENERATION))
#head(energy_file)
#sort the STATE column to find missing values
energy_file<-energy_file[order(energy_file$STATE),]
#use subset to remove the STATES with empty cells
energy_file<-subset(energy_file, STATE!="  ")
#change the US-Total values to US-TOTAL so that all are in Uppercase now
energy_file[,2] = toupper(energy_file[,2])
#remove all rows where generation is negative but still keep the ones with 0
energy_file <- subset(energy_file, GENERATION>=0)
#removethe 4 energy sources that are not required…42293 remain
energy_file <- subset(energy_file, (SOURCE!= "Other"))
energy_file <- subset(energy_file, SOURCE!= "Other Gases")
energy_file <- subset(energy_file, SOURCE!= "Other Biomass")
energy_file <- subset(energy_file, SOURCE!= "Pumped Storage")
Plot_source<-subset(energy_file, SOURCE!="Total")
#convert the columns into factors
energy_file$STATE <- as.factor(energy_file$STATE)
energy_file$PRODUCER <- as.factor(energy_file$PRODUCER)
energy_file$SOURCE <- as.factor(energy_file$SOURCE)
#rename energy sources to make easier: hydro, wood, electric, solar
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Hydroelectric Conventional"]<- "Hydro"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Wood and Wood Derived Fuels"]<- "Wood"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal and Photovoltaic"] <- "Solar"
#display and check all the levels in the data
#Sapply(energy_file, levels)
Plotdata<-subset(energy_file, energy_file$SOURCE!="Total")
levels(Plotdata$SOURCE)
Plotdata<-subset(energy_file, energy_file$SOURCE!=Total)
Plotdata<-subset(energy_file, energy_file$SOURCE!='Total')
levels(Plotdata$SOURCE)
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE,stat="identity")) +
ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,fill=SOURCE),stat="identity") +
ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE),stat="identity")+ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
#set the correct wd
setwd('C:/Users/ribta/OneDrive/Desktop/UIC/Courses/Spring 2021/CS424/project1')
#Cleaning up the data for analysis
#read the energy data into file
energy_file<-read.csv(file = 'annual_generation_state.csv')
#remane the columns name for ease
names(energy_file)[5] <- "GENERATION"
names(energy_file)[4]<-"SOURCE"
names(energy_file)[3]<-"PRODUCER"
#check the column types
#sapply(energy_file,class)
#remove all the , from GEN column
#convert GEN column into numeric values need to use gsub instead of sub
energy_file$GENERATION <- as.numeric( gsub(",", "", energy_file$GENERATION))
#head(energy_file)
#sort the STATE column to find missing values
energy_file<-energy_file[order(energy_file$STATE),]
#use subset to remove the STATES with empty cells
energy_file<-subset(energy_file, STATE!="  ")
#change the US-Total values to US-TOTAL so that all are in Uppercase now
energy_file[,2] = toupper(energy_file[,2])
#remove all rows where generation is negative but still keep the ones with 0
energy_file <- subset(energy_file, GENERATION>=0)
#removethe 4 energy sources that are not required…42293 remain
energy_file <- subset(energy_file, (SOURCE!= "Other"))
energy_file <- subset(energy_file, SOURCE!= "Other Gases")
energy_file <- subset(energy_file, SOURCE!= "Other Biomass")
energy_file <- subset(energy_file, SOURCE!= "Pumped Storage")
energy_file <- subset(energy_file, SOURCE!= "Total")
#convert the columns into factors
energy_file$STATE <- as.factor(energy_file$STATE)
energy_file$PRODUCER <- as.factor(energy_file$PRODUCER)
energy_file$SOURCE <- as.factor(energy_file$SOURCE)
View(energy_file)
#rename energy sources to make easier: hydro, wood, electric, solar
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Hydroelectric Conventional"]<- "Hydro"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Wood and Wood Derived Fuels"]<- "Wood"
levels(energy_file$SOURCE)[levels(energy_file$SOURCE)=="Solar Thermal and Photovoltaic"] <- "Solar"
#display and check all the levels in the data
#Sapply(energy_file, levels)
#remove the unused levels or energy sources 42293 objects remain
#droplevels(energy_file$source)
#View(energy_file)
#display.brewer.all() : to check for all available palettes in color brewer
#energyPlot1<-table(energy_file$SOURCE, energy_file$YEAR)
#barplot(energyPlot1, main="Energy Source consumed per year", xlab = "Year", ylab = "Energy consumed (MWh)")
#ggplot(data=energyPlot1)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE))
#create color vector to use color blind safe colors and consistency for plotting the types of energysources
colors<-c('Coal'='#a50026','Geothermal'='#d73027','Hydro'='#f46d43','Natural Gas'='#fdae61','Nuclear'='#fee090','Petroleum'='#e0f3f8','Solar'='#abd9e9',Total='#313695','Wind'='#74add1','Wood'='#4575b4')
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE),stat="identity")+ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE),stat="identity")+ggtitle("Total Amount of each enegry source per year from 1990-2019")
library(ggplot2)
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE),stat="identity")+ggtitle("Total Amount of each enegry source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=YEAR,y=GENERATION,fill=SOURCE),stat="identity")+ggtitle("Total Amount of each enegry source per year from 1990-2019")+ylab("Energy Amount (KWh)")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
ggplot(energy_file, aes(x = YEAR)) +
geom_bar(aes(y = ..count../sum(..count..), fill = SOURCE)) +
scale_fill_brewer(palette = "Set3") +
ylab("Percent") +
ggtitle("The percentage of each energy source per year from 1990-2019")
ggplot(data=energy_file)+ geom_bar(mapping=aes(x=energy_file$YEAR, fill=energy_file$SOURCE),position="fill")
